// Code generated by ent, DO NOT EDIT.

package request

import (
	"golang-boilerplate/ent/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.Request {
	return predicate.Request(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.Request {
	return predicate.Request(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.Request {
	return predicate.Request(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldID), id))
	})
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.Request {
	return predicate.Request(func(s *sql.Selector) {
		v := make([]any, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.In(s.C(FieldID), v...))
	})
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.Request {
	return predicate.Request(func(s *sql.Selector) {
		v := make([]any, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.NotIn(s.C(FieldID), v...))
	})
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.Request {
	return predicate.Request(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldID), id))
	})
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.Request {
	return predicate.Request(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldID), id))
	})
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.Request {
	return predicate.Request(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldID), id))
	})
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.Request {
	return predicate.Request(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldID), id))
	})
}

// ContractID applies equality check predicate on the "contract_id" field. It's identical to ContractIDEQ.
func ContractID(v int) predicate.Request {
	return predicate.Request(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldContractID), v))
	})
}

// VendorID applies equality check predicate on the "vendor_id" field. It's identical to VendorIDEQ.
func VendorID(v int) predicate.Request {
	return predicate.Request(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldVendorID), v))
	})
}

// ContractorID applies equality check predicate on the "contractor_id" field. It's identical to ContractorIDEQ.
func ContractorID(v int) predicate.Request {
	return predicate.Request(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldContractorID), v))
	})
}

// Amount applies equality check predicate on the "amount" field. It's identical to AmountEQ.
func Amount(v int) predicate.Request {
	return predicate.Request(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldAmount), v))
	})
}

// CollectionDate applies equality check predicate on the "collection_date" field. It's identical to CollectionDateEQ.
func CollectionDate(v time.Time) predicate.Request {
	return predicate.Request(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCollectionDate), v))
	})
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.Request {
	return predicate.Request(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreatedAt), v))
	})
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.Request {
	return predicate.Request(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUpdatedAt), v))
	})
}

// ContractIDEQ applies the EQ predicate on the "contract_id" field.
func ContractIDEQ(v int) predicate.Request {
	return predicate.Request(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldContractID), v))
	})
}

// ContractIDNEQ applies the NEQ predicate on the "contract_id" field.
func ContractIDNEQ(v int) predicate.Request {
	return predicate.Request(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldContractID), v))
	})
}

// ContractIDIn applies the In predicate on the "contract_id" field.
func ContractIDIn(vs ...int) predicate.Request {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Request(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldContractID), v...))
	})
}

// ContractIDNotIn applies the NotIn predicate on the "contract_id" field.
func ContractIDNotIn(vs ...int) predicate.Request {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Request(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldContractID), v...))
	})
}

// ContractIDGT applies the GT predicate on the "contract_id" field.
func ContractIDGT(v int) predicate.Request {
	return predicate.Request(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldContractID), v))
	})
}

// ContractIDGTE applies the GTE predicate on the "contract_id" field.
func ContractIDGTE(v int) predicate.Request {
	return predicate.Request(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldContractID), v))
	})
}

// ContractIDLT applies the LT predicate on the "contract_id" field.
func ContractIDLT(v int) predicate.Request {
	return predicate.Request(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldContractID), v))
	})
}

// ContractIDLTE applies the LTE predicate on the "contract_id" field.
func ContractIDLTE(v int) predicate.Request {
	return predicate.Request(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldContractID), v))
	})
}

// VendorIDEQ applies the EQ predicate on the "vendor_id" field.
func VendorIDEQ(v int) predicate.Request {
	return predicate.Request(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldVendorID), v))
	})
}

// VendorIDNEQ applies the NEQ predicate on the "vendor_id" field.
func VendorIDNEQ(v int) predicate.Request {
	return predicate.Request(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldVendorID), v))
	})
}

// VendorIDIn applies the In predicate on the "vendor_id" field.
func VendorIDIn(vs ...int) predicate.Request {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Request(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldVendorID), v...))
	})
}

// VendorIDNotIn applies the NotIn predicate on the "vendor_id" field.
func VendorIDNotIn(vs ...int) predicate.Request {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Request(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldVendorID), v...))
	})
}

// VendorIDGT applies the GT predicate on the "vendor_id" field.
func VendorIDGT(v int) predicate.Request {
	return predicate.Request(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldVendorID), v))
	})
}

// VendorIDGTE applies the GTE predicate on the "vendor_id" field.
func VendorIDGTE(v int) predicate.Request {
	return predicate.Request(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldVendorID), v))
	})
}

// VendorIDLT applies the LT predicate on the "vendor_id" field.
func VendorIDLT(v int) predicate.Request {
	return predicate.Request(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldVendorID), v))
	})
}

// VendorIDLTE applies the LTE predicate on the "vendor_id" field.
func VendorIDLTE(v int) predicate.Request {
	return predicate.Request(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldVendorID), v))
	})
}

// ContractorIDEQ applies the EQ predicate on the "contractor_id" field.
func ContractorIDEQ(v int) predicate.Request {
	return predicate.Request(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldContractorID), v))
	})
}

// ContractorIDNEQ applies the NEQ predicate on the "contractor_id" field.
func ContractorIDNEQ(v int) predicate.Request {
	return predicate.Request(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldContractorID), v))
	})
}

// ContractorIDIn applies the In predicate on the "contractor_id" field.
func ContractorIDIn(vs ...int) predicate.Request {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Request(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldContractorID), v...))
	})
}

// ContractorIDNotIn applies the NotIn predicate on the "contractor_id" field.
func ContractorIDNotIn(vs ...int) predicate.Request {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Request(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldContractorID), v...))
	})
}

// ContractorIDGT applies the GT predicate on the "contractor_id" field.
func ContractorIDGT(v int) predicate.Request {
	return predicate.Request(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldContractorID), v))
	})
}

// ContractorIDGTE applies the GTE predicate on the "contractor_id" field.
func ContractorIDGTE(v int) predicate.Request {
	return predicate.Request(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldContractorID), v))
	})
}

// ContractorIDLT applies the LT predicate on the "contractor_id" field.
func ContractorIDLT(v int) predicate.Request {
	return predicate.Request(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldContractorID), v))
	})
}

// ContractorIDLTE applies the LTE predicate on the "contractor_id" field.
func ContractorIDLTE(v int) predicate.Request {
	return predicate.Request(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldContractorID), v))
	})
}

// AmountEQ applies the EQ predicate on the "amount" field.
func AmountEQ(v int) predicate.Request {
	return predicate.Request(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldAmount), v))
	})
}

// AmountNEQ applies the NEQ predicate on the "amount" field.
func AmountNEQ(v int) predicate.Request {
	return predicate.Request(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldAmount), v))
	})
}

// AmountIn applies the In predicate on the "amount" field.
func AmountIn(vs ...int) predicate.Request {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Request(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldAmount), v...))
	})
}

// AmountNotIn applies the NotIn predicate on the "amount" field.
func AmountNotIn(vs ...int) predicate.Request {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Request(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldAmount), v...))
	})
}

// AmountGT applies the GT predicate on the "amount" field.
func AmountGT(v int) predicate.Request {
	return predicate.Request(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldAmount), v))
	})
}

// AmountGTE applies the GTE predicate on the "amount" field.
func AmountGTE(v int) predicate.Request {
	return predicate.Request(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldAmount), v))
	})
}

// AmountLT applies the LT predicate on the "amount" field.
func AmountLT(v int) predicate.Request {
	return predicate.Request(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldAmount), v))
	})
}

// AmountLTE applies the LTE predicate on the "amount" field.
func AmountLTE(v int) predicate.Request {
	return predicate.Request(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldAmount), v))
	})
}

// StatusEQ applies the EQ predicate on the "status" field.
func StatusEQ(v Status) predicate.Request {
	return predicate.Request(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldStatus), v))
	})
}

// StatusNEQ applies the NEQ predicate on the "status" field.
func StatusNEQ(v Status) predicate.Request {
	return predicate.Request(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldStatus), v))
	})
}

// StatusIn applies the In predicate on the "status" field.
func StatusIn(vs ...Status) predicate.Request {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Request(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldStatus), v...))
	})
}

// StatusNotIn applies the NotIn predicate on the "status" field.
func StatusNotIn(vs ...Status) predicate.Request {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Request(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldStatus), v...))
	})
}

// CollectionDateEQ applies the EQ predicate on the "collection_date" field.
func CollectionDateEQ(v time.Time) predicate.Request {
	return predicate.Request(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCollectionDate), v))
	})
}

// CollectionDateNEQ applies the NEQ predicate on the "collection_date" field.
func CollectionDateNEQ(v time.Time) predicate.Request {
	return predicate.Request(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldCollectionDate), v))
	})
}

// CollectionDateIn applies the In predicate on the "collection_date" field.
func CollectionDateIn(vs ...time.Time) predicate.Request {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Request(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldCollectionDate), v...))
	})
}

// CollectionDateNotIn applies the NotIn predicate on the "collection_date" field.
func CollectionDateNotIn(vs ...time.Time) predicate.Request {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Request(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldCollectionDate), v...))
	})
}

// CollectionDateGT applies the GT predicate on the "collection_date" field.
func CollectionDateGT(v time.Time) predicate.Request {
	return predicate.Request(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldCollectionDate), v))
	})
}

// CollectionDateGTE applies the GTE predicate on the "collection_date" field.
func CollectionDateGTE(v time.Time) predicate.Request {
	return predicate.Request(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldCollectionDate), v))
	})
}

// CollectionDateLT applies the LT predicate on the "collection_date" field.
func CollectionDateLT(v time.Time) predicate.Request {
	return predicate.Request(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldCollectionDate), v))
	})
}

// CollectionDateLTE applies the LTE predicate on the "collection_date" field.
func CollectionDateLTE(v time.Time) predicate.Request {
	return predicate.Request(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldCollectionDate), v))
	})
}

// CollectionDateIsNil applies the IsNil predicate on the "collection_date" field.
func CollectionDateIsNil() predicate.Request {
	return predicate.Request(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldCollectionDate)))
	})
}

// CollectionDateNotNil applies the NotNil predicate on the "collection_date" field.
func CollectionDateNotNil() predicate.Request {
	return predicate.Request(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldCollectionDate)))
	})
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.Request {
	return predicate.Request(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.Request {
	return predicate.Request(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.Request {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Request(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldCreatedAt), v...))
	})
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.Request {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Request(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldCreatedAt), v...))
	})
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.Request {
	return predicate.Request(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.Request {
	return predicate.Request(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.Request {
	return predicate.Request(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.Request {
	return predicate.Request(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldCreatedAt), v))
	})
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v time.Time) predicate.Request {
	return predicate.Request(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v time.Time) predicate.Request {
	return predicate.Request(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...time.Time) predicate.Request {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Request(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldUpdatedAt), v...))
	})
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.Request {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Request(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldUpdatedAt), v...))
	})
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v time.Time) predicate.Request {
	return predicate.Request(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v time.Time) predicate.Request {
	return predicate.Request(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v time.Time) predicate.Request {
	return predicate.Request(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v time.Time) predicate.Request {
	return predicate.Request(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldUpdatedAt), v))
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Request) predicate.Request {
	return predicate.Request(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Request) predicate.Request {
	return predicate.Request(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Request) predicate.Request {
	return predicate.Request(func(s *sql.Selector) {
		p(s.Not())
	})
}

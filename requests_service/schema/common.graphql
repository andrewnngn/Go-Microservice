directive @goField(forceResolver: Boolean, name: String) on FIELD_DEFINITION | INPUT_FIELD_DEFINITION
directive @goModel(model: String, models: [String!]) on OBJECT | INPUT_OBJECT | SCALAR | ENUM | INTERFACE | UNION
"""
CreateRequestInput is used for create Request object.
Input was generated by ent.
"""
input CreateRequestInput {
  contractID: Int!
  vendorID: Int!
  contractorID: Int!
  amount: Int!
  status: RequestStatus
  collectionDate: Time
  createdAt: Time
  updatedAt: Time
}
"""
Define a Relay Cursor type:
https://relay.dev/graphql/connections.htm#sec-Cursor
"""
scalar Cursor
"""
An object with an ID.
Follows the [Relay Global Object Identification Specification](https://relay.dev/graphql/objectidentification.htm)
"""
interface Node @goModel(model: "golang-boilerplate/ent.Noder") {
  """The id of the object."""
  id: ID!
}
"""Possible directions in which to order a list of items when provided an `orderBy` argument."""
enum OrderDirection {
  """Specifies an ascending order for a given `orderBy` argument."""
  ASC
  """Specifies a descending order for a given `orderBy` argument."""
  DESC
}
"""
Information about pagination in a connection.
https://relay.dev/graphql/connections.htm#sec-undefined.PageInfo
"""
type PageInfo {
  """When paginating forwards, are there more items?"""
  hasNextPage: Boolean!
  """When paginating backwards, are there more items?"""
  hasPreviousPage: Boolean!
  """When paginating backwards, the cursor to continue."""
  startCursor: Cursor
  """When paginating forwards, the cursor to continue."""
  endCursor: Cursor
}
type Query {
  """Fetches an object given its ID."""
  node(
    """ID of the object."""
    id: ID!
  ): Node
  """Lookup nodes by a list of IDs."""
  nodes(
    """The list of node IDs."""
    ids: [ID!]!
  ): [Node]!
  requests(
    """Returns the elements in the list that come after the specified cursor."""
    after: Cursor

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the elements in the list that come before the specified cursor."""
    before: Cursor

    """Returns the last _n_ elements from the list."""
    last: Int

    """Ordering options for Requests returned from the connection."""
    orderBy: RequestOrder

    """Filtering options for Requests returned from the connection."""
    where: RequestWhereInput
  ): RequestConnection!
}
type Request implements Node {
  id: ID!
  contractID: Int!
  vendorID: Int!
  contractorID: Int!
  amount: Int!
  status: RequestStatus!
  collectionDate: Time
  createdAt: Time!
  updatedAt: Time!
}
"""A connection to a list of items."""
type RequestConnection {
  """A list of edges."""
  edges: [RequestEdge]
  """Information to aid in pagination."""
  pageInfo: PageInfo!
  """Identifies the total count of items in the connection."""
  totalCount: Int!
}
"""An edge in a connection."""
type RequestEdge {
  """The item at the end of the edge."""
  node: Request
  """A cursor for use in pagination."""
  cursor: Cursor!
}
"""Ordering options for Request connections"""
input RequestOrder {
  """The ordering direction."""
  direction: OrderDirection! = ASC
  """The field by which to order Requests."""
  field: RequestOrderField!
}
"""Properties by which Request connections can be ordered."""
enum RequestOrderField {
  CONTRACT_ID
  VENDOR_ID
  CONTRACTOR_ID
  AMOUNT
  STATUS
  COLLECTION_DATE
  CREATED_AT
  UPDATED_AT
}
"""RequestStatus is enum for the field status"""
enum RequestStatus @goModel(model: "golang-boilerplate/ent/request.Status") {
  created
  readyToCollect
  arrangeCollectionDate
  collected
}
"""
RequestWhereInput is used for filtering Request objects.
Input was generated by ent.
"""
input RequestWhereInput {
  not: RequestWhereInput
  and: [RequestWhereInput!]
  or: [RequestWhereInput!]
  """id field predicates"""
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  """contract_id field predicates"""
  contractID: Int
  contractIDNEQ: Int
  contractIDIn: [Int!]
  contractIDNotIn: [Int!]
  contractIDGT: Int
  contractIDGTE: Int
  contractIDLT: Int
  contractIDLTE: Int
  """vendor_id field predicates"""
  vendorID: Int
  vendorIDNEQ: Int
  vendorIDIn: [Int!]
  vendorIDNotIn: [Int!]
  vendorIDGT: Int
  vendorIDGTE: Int
  vendorIDLT: Int
  vendorIDLTE: Int
  """contractor_id field predicates"""
  contractorID: Int
  contractorIDNEQ: Int
  contractorIDIn: [Int!]
  contractorIDNotIn: [Int!]
  contractorIDGT: Int
  contractorIDGTE: Int
  contractorIDLT: Int
  contractorIDLTE: Int
  """amount field predicates"""
  amount: Int
  amountNEQ: Int
  amountIn: [Int!]
  amountNotIn: [Int!]
  amountGT: Int
  amountGTE: Int
  amountLT: Int
  amountLTE: Int
  """status field predicates"""
  status: RequestStatus
  statusNEQ: RequestStatus
  statusIn: [RequestStatus!]
  statusNotIn: [RequestStatus!]
  """collection_date field predicates"""
  collectionDate: Time
  collectionDateNEQ: Time
  collectionDateIn: [Time!]
  collectionDateNotIn: [Time!]
  collectionDateGT: Time
  collectionDateGTE: Time
  collectionDateLT: Time
  collectionDateLTE: Time
  collectionDateIsNil: Boolean
  collectionDateNotNil: Boolean
  """created_at field predicates"""
  createdAt: Time
  createdAtNEQ: Time
  createdAtIn: [Time!]
  createdAtNotIn: [Time!]
  createdAtGT: Time
  createdAtGTE: Time
  createdAtLT: Time
  createdAtLTE: Time
  """updated_at field predicates"""
  updatedAt: Time
  updatedAtNEQ: Time
  updatedAtIn: [Time!]
  updatedAtNotIn: [Time!]
  updatedAtGT: Time
  updatedAtGTE: Time
  updatedAtLT: Time
  updatedAtLTE: Time
}
"""The builtin Time type"""
scalar Time
"""
UpdateRequestInput is used for update Request object.
Input was generated by ent.
"""
input UpdateRequestInput {
  contractID: Int
  vendorID: Int
  contractorID: Int
  amount: Int
  status: RequestStatus
  clearCollectionDate: Boolean
  collectionDate: Time
}

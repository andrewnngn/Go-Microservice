directive @goField(forceResolver: Boolean, name: String) on FIELD_DEFINITION | INPUT_FIELD_DEFINITION
directive @goModel(model: String, models: [String!]) on OBJECT | INPUT_OBJECT | SCALAR | ENUM | INTERFACE | UNION
type Contract implements Node {
  id: ID!
  vendorID: Int!
  status: ContractStatus!
  startDate: Time
  endDate: Time
  totalAmount: Int!
  remainingAmount: Int!
  createdAt: Time!
  updatedAt: Time!
}
"""A connection to a list of items."""
type ContractConnection {
  """A list of edges."""
  edges: [ContractEdge]
  """Information to aid in pagination."""
  pageInfo: PageInfo!
  """Identifies the total count of items in the connection."""
  totalCount: Int!
}
"""An edge in a connection."""
type ContractEdge {
  """The item at the end of the edge."""
  node: Contract
  """A cursor for use in pagination."""
  cursor: Cursor!
}
"""Ordering options for Contract connections"""
input ContractOrder {
  """The ordering direction."""
  direction: OrderDirection! = ASC
  """The field by which to order Contracts."""
  field: ContractOrderField!
}
"""Properties by which Contract connections can be ordered."""
enum ContractOrderField {
  VENDOR_ID
  STATUS
  START_DATE
  END_DATE
  TOTAL_AMOUNT
  REMAINING_AMOUNT
  CREATED_AT
  UPDATED_AT
}
"""ContractStatus is enum for the field status"""
enum ContractStatus @goModel(model: "golang-boilerplate/ent/contract.Status") {
  ongoing
  ended
  negotiating
}
"""
ContractWhereInput is used for filtering Contract objects.
Input was generated by ent.
"""
input ContractWhereInput {
  not: ContractWhereInput
  and: [ContractWhereInput!]
  or: [ContractWhereInput!]
  """id field predicates"""
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  """vendor_id field predicates"""
  vendorID: Int
  vendorIDNEQ: Int
  vendorIDIn: [Int!]
  vendorIDNotIn: [Int!]
  vendorIDGT: Int
  vendorIDGTE: Int
  vendorIDLT: Int
  vendorIDLTE: Int
  """status field predicates"""
  status: ContractStatus
  statusNEQ: ContractStatus
  statusIn: [ContractStatus!]
  statusNotIn: [ContractStatus!]
  """start_date field predicates"""
  startDate: Time
  startDateNEQ: Time
  startDateIn: [Time!]
  startDateNotIn: [Time!]
  startDateGT: Time
  startDateGTE: Time
  startDateLT: Time
  startDateLTE: Time
  startDateIsNil: Boolean
  startDateNotNil: Boolean
  """end_date field predicates"""
  endDate: Time
  endDateNEQ: Time
  endDateIn: [Time!]
  endDateNotIn: [Time!]
  endDateGT: Time
  endDateGTE: Time
  endDateLT: Time
  endDateLTE: Time
  endDateIsNil: Boolean
  endDateNotNil: Boolean
  """total_amount field predicates"""
  totalAmount: Int
  totalAmountNEQ: Int
  totalAmountIn: [Int!]
  totalAmountNotIn: [Int!]
  totalAmountGT: Int
  totalAmountGTE: Int
  totalAmountLT: Int
  totalAmountLTE: Int
  """remaining_amount field predicates"""
  remainingAmount: Int
  remainingAmountNEQ: Int
  remainingAmountIn: [Int!]
  remainingAmountNotIn: [Int!]
  remainingAmountGT: Int
  remainingAmountGTE: Int
  remainingAmountLT: Int
  remainingAmountLTE: Int
  """created_at field predicates"""
  createdAt: Time
  createdAtNEQ: Time
  createdAtIn: [Time!]
  createdAtNotIn: [Time!]
  createdAtGT: Time
  createdAtGTE: Time
  createdAtLT: Time
  createdAtLTE: Time
  """updated_at field predicates"""
  updatedAt: Time
  updatedAtNEQ: Time
  updatedAtIn: [Time!]
  updatedAtNotIn: [Time!]
  updatedAtGT: Time
  updatedAtGTE: Time
  updatedAtLT: Time
  updatedAtLTE: Time
}
"""
CreateContractInput is used for create Contract object.
Input was generated by ent.
"""
input CreateContractInput {
  vendorID: Int!
  status: ContractStatus
  startDate: Time
  endDate: Time
  totalAmount: Int
  remainingAmount: Int
  createdAt: Time
  updatedAt: Time
}
"""
Define a Relay Cursor type:
https://relay.dev/graphql/connections.htm#sec-Cursor
"""
scalar Cursor
"""
An object with an ID.
Follows the [Relay Global Object Identification Specification](https://relay.dev/graphql/objectidentification.htm)
"""
interface Node @goModel(model: "golang-boilerplate/ent.Noder") {
  """The id of the object."""
  id: ID!
}
"""Possible directions in which to order a list of items when provided an `orderBy` argument."""
enum OrderDirection {
  """Specifies an ascending order for a given `orderBy` argument."""
  ASC
  """Specifies a descending order for a given `orderBy` argument."""
  DESC
}
"""
Information about pagination in a connection.
https://relay.dev/graphql/connections.htm#sec-undefined.PageInfo
"""
type PageInfo {
  """When paginating forwards, are there more items?"""
  hasNextPage: Boolean!
  """When paginating backwards, are there more items?"""
  hasPreviousPage: Boolean!
  """When paginating backwards, the cursor to continue."""
  startCursor: Cursor
  """When paginating forwards, the cursor to continue."""
  endCursor: Cursor
}
type Query {
  """Fetches an object given its ID."""
  node(
    """ID of the object."""
    id: ID!
  ): Node
  """Lookup nodes by a list of IDs."""
  nodes(
    """The list of node IDs."""
    ids: [ID!]!
  ): [Node]!
  contracts(
    """Returns the elements in the list that come after the specified cursor."""
    after: Cursor

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the elements in the list that come before the specified cursor."""
    before: Cursor

    """Returns the last _n_ elements from the list."""
    last: Int

    """Ordering options for Contracts returned from the connection."""
    orderBy: ContractOrder

    """Filtering options for Contracts returned from the connection."""
    where: ContractWhereInput
  ): ContractConnection!
}
"""The builtin Time type"""
scalar Time
"""
UpdateContractInput is used for update Contract object.
Input was generated by ent.
"""
input UpdateContractInput {
  vendorID: Int
  status: ContractStatus
  clearStartDate: Boolean
  startDate: Time
  clearEndDate: Boolean
  endDate: Time
  totalAmount: Int
  remainingAmount: Int
}

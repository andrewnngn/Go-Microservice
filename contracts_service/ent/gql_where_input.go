// Code generated by ent, DO NOT EDIT.

package ent

import (
	"errors"
	"fmt"
	"golang-boilerplate/ent/contract"
	"golang-boilerplate/ent/predicate"
	"time"
)

// ContractWhereInput represents a where input for filtering Contract queries.
type ContractWhereInput struct {
	Predicates []predicate.Contract  `json:"-"`
	Not        *ContractWhereInput   `json:"not,omitempty"`
	Or         []*ContractWhereInput `json:"or,omitempty"`
	And        []*ContractWhereInput `json:"and,omitempty"`

	// "id" field predicates.
	ID      *int  `json:"id,omitempty"`
	IDNEQ   *int  `json:"idNEQ,omitempty"`
	IDIn    []int `json:"idIn,omitempty"`
	IDNotIn []int `json:"idNotIn,omitempty"`
	IDGT    *int  `json:"idGT,omitempty"`
	IDGTE   *int  `json:"idGTE,omitempty"`
	IDLT    *int  `json:"idLT,omitempty"`
	IDLTE   *int  `json:"idLTE,omitempty"`

	// "vendor_id" field predicates.
	VendorID      *int  `json:"vendorID,omitempty"`
	VendorIDNEQ   *int  `json:"vendorIDNEQ,omitempty"`
	VendorIDIn    []int `json:"vendorIDIn,omitempty"`
	VendorIDNotIn []int `json:"vendorIDNotIn,omitempty"`
	VendorIDGT    *int  `json:"vendorIDGT,omitempty"`
	VendorIDGTE   *int  `json:"vendorIDGTE,omitempty"`
	VendorIDLT    *int  `json:"vendorIDLT,omitempty"`
	VendorIDLTE   *int  `json:"vendorIDLTE,omitempty"`

	// "status" field predicates.
	Status      *contract.Status  `json:"status,omitempty"`
	StatusNEQ   *contract.Status  `json:"statusNEQ,omitempty"`
	StatusIn    []contract.Status `json:"statusIn,omitempty"`
	StatusNotIn []contract.Status `json:"statusNotIn,omitempty"`

	// "start_date" field predicates.
	StartDate       *time.Time  `json:"startDate,omitempty"`
	StartDateNEQ    *time.Time  `json:"startDateNEQ,omitempty"`
	StartDateIn     []time.Time `json:"startDateIn,omitempty"`
	StartDateNotIn  []time.Time `json:"startDateNotIn,omitempty"`
	StartDateGT     *time.Time  `json:"startDateGT,omitempty"`
	StartDateGTE    *time.Time  `json:"startDateGTE,omitempty"`
	StartDateLT     *time.Time  `json:"startDateLT,omitempty"`
	StartDateLTE    *time.Time  `json:"startDateLTE,omitempty"`
	StartDateIsNil  bool        `json:"startDateIsNil,omitempty"`
	StartDateNotNil bool        `json:"startDateNotNil,omitempty"`

	// "end_date" field predicates.
	EndDate       *time.Time  `json:"endDate,omitempty"`
	EndDateNEQ    *time.Time  `json:"endDateNEQ,omitempty"`
	EndDateIn     []time.Time `json:"endDateIn,omitempty"`
	EndDateNotIn  []time.Time `json:"endDateNotIn,omitempty"`
	EndDateGT     *time.Time  `json:"endDateGT,omitempty"`
	EndDateGTE    *time.Time  `json:"endDateGTE,omitempty"`
	EndDateLT     *time.Time  `json:"endDateLT,omitempty"`
	EndDateLTE    *time.Time  `json:"endDateLTE,omitempty"`
	EndDateIsNil  bool        `json:"endDateIsNil,omitempty"`
	EndDateNotNil bool        `json:"endDateNotNil,omitempty"`

	// "total_amount" field predicates.
	TotalAmount      *int  `json:"totalAmount,omitempty"`
	TotalAmountNEQ   *int  `json:"totalAmountNEQ,omitempty"`
	TotalAmountIn    []int `json:"totalAmountIn,omitempty"`
	TotalAmountNotIn []int `json:"totalAmountNotIn,omitempty"`
	TotalAmountGT    *int  `json:"totalAmountGT,omitempty"`
	TotalAmountGTE   *int  `json:"totalAmountGTE,omitempty"`
	TotalAmountLT    *int  `json:"totalAmountLT,omitempty"`
	TotalAmountLTE   *int  `json:"totalAmountLTE,omitempty"`

	// "remaining_amount" field predicates.
	RemainingAmount      *int  `json:"remainingAmount,omitempty"`
	RemainingAmountNEQ   *int  `json:"remainingAmountNEQ,omitempty"`
	RemainingAmountIn    []int `json:"remainingAmountIn,omitempty"`
	RemainingAmountNotIn []int `json:"remainingAmountNotIn,omitempty"`
	RemainingAmountGT    *int  `json:"remainingAmountGT,omitempty"`
	RemainingAmountGTE   *int  `json:"remainingAmountGTE,omitempty"`
	RemainingAmountLT    *int  `json:"remainingAmountLT,omitempty"`
	RemainingAmountLTE   *int  `json:"remainingAmountLTE,omitempty"`

	// "created_at" field predicates.
	CreatedAt      *time.Time  `json:"createdAt,omitempty"`
	CreatedAtNEQ   *time.Time  `json:"createdAtNEQ,omitempty"`
	CreatedAtIn    []time.Time `json:"createdAtIn,omitempty"`
	CreatedAtNotIn []time.Time `json:"createdAtNotIn,omitempty"`
	CreatedAtGT    *time.Time  `json:"createdAtGT,omitempty"`
	CreatedAtGTE   *time.Time  `json:"createdAtGTE,omitempty"`
	CreatedAtLT    *time.Time  `json:"createdAtLT,omitempty"`
	CreatedAtLTE   *time.Time  `json:"createdAtLTE,omitempty"`

	// "updated_at" field predicates.
	UpdatedAt      *time.Time  `json:"updatedAt,omitempty"`
	UpdatedAtNEQ   *time.Time  `json:"updatedAtNEQ,omitempty"`
	UpdatedAtIn    []time.Time `json:"updatedAtIn,omitempty"`
	UpdatedAtNotIn []time.Time `json:"updatedAtNotIn,omitempty"`
	UpdatedAtGT    *time.Time  `json:"updatedAtGT,omitempty"`
	UpdatedAtGTE   *time.Time  `json:"updatedAtGTE,omitempty"`
	UpdatedAtLT    *time.Time  `json:"updatedAtLT,omitempty"`
	UpdatedAtLTE   *time.Time  `json:"updatedAtLTE,omitempty"`
}

// AddPredicates adds custom predicates to the where input to be used during the filtering phase.
func (i *ContractWhereInput) AddPredicates(predicates ...predicate.Contract) {
	i.Predicates = append(i.Predicates, predicates...)
}

// Filter applies the ContractWhereInput filter on the ContractQuery builder.
func (i *ContractWhereInput) Filter(q *ContractQuery) (*ContractQuery, error) {
	if i == nil {
		return q, nil
	}
	p, err := i.P()
	if err != nil {
		if err == ErrEmptyContractWhereInput {
			return q, nil
		}
		return nil, err
	}
	return q.Where(p), nil
}

// ErrEmptyContractWhereInput is returned in case the ContractWhereInput is empty.
var ErrEmptyContractWhereInput = errors.New("ent: empty predicate ContractWhereInput")

// P returns a predicate for filtering contracts.
// An error is returned if the input is empty or invalid.
func (i *ContractWhereInput) P() (predicate.Contract, error) {
	var predicates []predicate.Contract
	if i.Not != nil {
		p, err := i.Not.P()
		if err != nil {
			return nil, fmt.Errorf("%w: field 'not'", err)
		}
		predicates = append(predicates, contract.Not(p))
	}
	switch n := len(i.Or); {
	case n == 1:
		p, err := i.Or[0].P()
		if err != nil {
			return nil, fmt.Errorf("%w: field 'or'", err)
		}
		predicates = append(predicates, p)
	case n > 1:
		or := make([]predicate.Contract, 0, n)
		for _, w := range i.Or {
			p, err := w.P()
			if err != nil {
				return nil, fmt.Errorf("%w: field 'or'", err)
			}
			or = append(or, p)
		}
		predicates = append(predicates, contract.Or(or...))
	}
	switch n := len(i.And); {
	case n == 1:
		p, err := i.And[0].P()
		if err != nil {
			return nil, fmt.Errorf("%w: field 'and'", err)
		}
		predicates = append(predicates, p)
	case n > 1:
		and := make([]predicate.Contract, 0, n)
		for _, w := range i.And {
			p, err := w.P()
			if err != nil {
				return nil, fmt.Errorf("%w: field 'and'", err)
			}
			and = append(and, p)
		}
		predicates = append(predicates, contract.And(and...))
	}
	predicates = append(predicates, i.Predicates...)
	if i.ID != nil {
		predicates = append(predicates, contract.IDEQ(*i.ID))
	}
	if i.IDNEQ != nil {
		predicates = append(predicates, contract.IDNEQ(*i.IDNEQ))
	}
	if len(i.IDIn) > 0 {
		predicates = append(predicates, contract.IDIn(i.IDIn...))
	}
	if len(i.IDNotIn) > 0 {
		predicates = append(predicates, contract.IDNotIn(i.IDNotIn...))
	}
	if i.IDGT != nil {
		predicates = append(predicates, contract.IDGT(*i.IDGT))
	}
	if i.IDGTE != nil {
		predicates = append(predicates, contract.IDGTE(*i.IDGTE))
	}
	if i.IDLT != nil {
		predicates = append(predicates, contract.IDLT(*i.IDLT))
	}
	if i.IDLTE != nil {
		predicates = append(predicates, contract.IDLTE(*i.IDLTE))
	}
	if i.VendorID != nil {
		predicates = append(predicates, contract.VendorIDEQ(*i.VendorID))
	}
	if i.VendorIDNEQ != nil {
		predicates = append(predicates, contract.VendorIDNEQ(*i.VendorIDNEQ))
	}
	if len(i.VendorIDIn) > 0 {
		predicates = append(predicates, contract.VendorIDIn(i.VendorIDIn...))
	}
	if len(i.VendorIDNotIn) > 0 {
		predicates = append(predicates, contract.VendorIDNotIn(i.VendorIDNotIn...))
	}
	if i.VendorIDGT != nil {
		predicates = append(predicates, contract.VendorIDGT(*i.VendorIDGT))
	}
	if i.VendorIDGTE != nil {
		predicates = append(predicates, contract.VendorIDGTE(*i.VendorIDGTE))
	}
	if i.VendorIDLT != nil {
		predicates = append(predicates, contract.VendorIDLT(*i.VendorIDLT))
	}
	if i.VendorIDLTE != nil {
		predicates = append(predicates, contract.VendorIDLTE(*i.VendorIDLTE))
	}
	if i.Status != nil {
		predicates = append(predicates, contract.StatusEQ(*i.Status))
	}
	if i.StatusNEQ != nil {
		predicates = append(predicates, contract.StatusNEQ(*i.StatusNEQ))
	}
	if len(i.StatusIn) > 0 {
		predicates = append(predicates, contract.StatusIn(i.StatusIn...))
	}
	if len(i.StatusNotIn) > 0 {
		predicates = append(predicates, contract.StatusNotIn(i.StatusNotIn...))
	}
	if i.StartDate != nil {
		predicates = append(predicates, contract.StartDateEQ(*i.StartDate))
	}
	if i.StartDateNEQ != nil {
		predicates = append(predicates, contract.StartDateNEQ(*i.StartDateNEQ))
	}
	if len(i.StartDateIn) > 0 {
		predicates = append(predicates, contract.StartDateIn(i.StartDateIn...))
	}
	if len(i.StartDateNotIn) > 0 {
		predicates = append(predicates, contract.StartDateNotIn(i.StartDateNotIn...))
	}
	if i.StartDateGT != nil {
		predicates = append(predicates, contract.StartDateGT(*i.StartDateGT))
	}
	if i.StartDateGTE != nil {
		predicates = append(predicates, contract.StartDateGTE(*i.StartDateGTE))
	}
	if i.StartDateLT != nil {
		predicates = append(predicates, contract.StartDateLT(*i.StartDateLT))
	}
	if i.StartDateLTE != nil {
		predicates = append(predicates, contract.StartDateLTE(*i.StartDateLTE))
	}
	if i.StartDateIsNil {
		predicates = append(predicates, contract.StartDateIsNil())
	}
	if i.StartDateNotNil {
		predicates = append(predicates, contract.StartDateNotNil())
	}
	if i.EndDate != nil {
		predicates = append(predicates, contract.EndDateEQ(*i.EndDate))
	}
	if i.EndDateNEQ != nil {
		predicates = append(predicates, contract.EndDateNEQ(*i.EndDateNEQ))
	}
	if len(i.EndDateIn) > 0 {
		predicates = append(predicates, contract.EndDateIn(i.EndDateIn...))
	}
	if len(i.EndDateNotIn) > 0 {
		predicates = append(predicates, contract.EndDateNotIn(i.EndDateNotIn...))
	}
	if i.EndDateGT != nil {
		predicates = append(predicates, contract.EndDateGT(*i.EndDateGT))
	}
	if i.EndDateGTE != nil {
		predicates = append(predicates, contract.EndDateGTE(*i.EndDateGTE))
	}
	if i.EndDateLT != nil {
		predicates = append(predicates, contract.EndDateLT(*i.EndDateLT))
	}
	if i.EndDateLTE != nil {
		predicates = append(predicates, contract.EndDateLTE(*i.EndDateLTE))
	}
	if i.EndDateIsNil {
		predicates = append(predicates, contract.EndDateIsNil())
	}
	if i.EndDateNotNil {
		predicates = append(predicates, contract.EndDateNotNil())
	}
	if i.TotalAmount != nil {
		predicates = append(predicates, contract.TotalAmountEQ(*i.TotalAmount))
	}
	if i.TotalAmountNEQ != nil {
		predicates = append(predicates, contract.TotalAmountNEQ(*i.TotalAmountNEQ))
	}
	if len(i.TotalAmountIn) > 0 {
		predicates = append(predicates, contract.TotalAmountIn(i.TotalAmountIn...))
	}
	if len(i.TotalAmountNotIn) > 0 {
		predicates = append(predicates, contract.TotalAmountNotIn(i.TotalAmountNotIn...))
	}
	if i.TotalAmountGT != nil {
		predicates = append(predicates, contract.TotalAmountGT(*i.TotalAmountGT))
	}
	if i.TotalAmountGTE != nil {
		predicates = append(predicates, contract.TotalAmountGTE(*i.TotalAmountGTE))
	}
	if i.TotalAmountLT != nil {
		predicates = append(predicates, contract.TotalAmountLT(*i.TotalAmountLT))
	}
	if i.TotalAmountLTE != nil {
		predicates = append(predicates, contract.TotalAmountLTE(*i.TotalAmountLTE))
	}
	if i.RemainingAmount != nil {
		predicates = append(predicates, contract.RemainingAmountEQ(*i.RemainingAmount))
	}
	if i.RemainingAmountNEQ != nil {
		predicates = append(predicates, contract.RemainingAmountNEQ(*i.RemainingAmountNEQ))
	}
	if len(i.RemainingAmountIn) > 0 {
		predicates = append(predicates, contract.RemainingAmountIn(i.RemainingAmountIn...))
	}
	if len(i.RemainingAmountNotIn) > 0 {
		predicates = append(predicates, contract.RemainingAmountNotIn(i.RemainingAmountNotIn...))
	}
	if i.RemainingAmountGT != nil {
		predicates = append(predicates, contract.RemainingAmountGT(*i.RemainingAmountGT))
	}
	if i.RemainingAmountGTE != nil {
		predicates = append(predicates, contract.RemainingAmountGTE(*i.RemainingAmountGTE))
	}
	if i.RemainingAmountLT != nil {
		predicates = append(predicates, contract.RemainingAmountLT(*i.RemainingAmountLT))
	}
	if i.RemainingAmountLTE != nil {
		predicates = append(predicates, contract.RemainingAmountLTE(*i.RemainingAmountLTE))
	}
	if i.CreatedAt != nil {
		predicates = append(predicates, contract.CreatedAtEQ(*i.CreatedAt))
	}
	if i.CreatedAtNEQ != nil {
		predicates = append(predicates, contract.CreatedAtNEQ(*i.CreatedAtNEQ))
	}
	if len(i.CreatedAtIn) > 0 {
		predicates = append(predicates, contract.CreatedAtIn(i.CreatedAtIn...))
	}
	if len(i.CreatedAtNotIn) > 0 {
		predicates = append(predicates, contract.CreatedAtNotIn(i.CreatedAtNotIn...))
	}
	if i.CreatedAtGT != nil {
		predicates = append(predicates, contract.CreatedAtGT(*i.CreatedAtGT))
	}
	if i.CreatedAtGTE != nil {
		predicates = append(predicates, contract.CreatedAtGTE(*i.CreatedAtGTE))
	}
	if i.CreatedAtLT != nil {
		predicates = append(predicates, contract.CreatedAtLT(*i.CreatedAtLT))
	}
	if i.CreatedAtLTE != nil {
		predicates = append(predicates, contract.CreatedAtLTE(*i.CreatedAtLTE))
	}
	if i.UpdatedAt != nil {
		predicates = append(predicates, contract.UpdatedAtEQ(*i.UpdatedAt))
	}
	if i.UpdatedAtNEQ != nil {
		predicates = append(predicates, contract.UpdatedAtNEQ(*i.UpdatedAtNEQ))
	}
	if len(i.UpdatedAtIn) > 0 {
		predicates = append(predicates, contract.UpdatedAtIn(i.UpdatedAtIn...))
	}
	if len(i.UpdatedAtNotIn) > 0 {
		predicates = append(predicates, contract.UpdatedAtNotIn(i.UpdatedAtNotIn...))
	}
	if i.UpdatedAtGT != nil {
		predicates = append(predicates, contract.UpdatedAtGT(*i.UpdatedAtGT))
	}
	if i.UpdatedAtGTE != nil {
		predicates = append(predicates, contract.UpdatedAtGTE(*i.UpdatedAtGTE))
	}
	if i.UpdatedAtLT != nil {
		predicates = append(predicates, contract.UpdatedAtLT(*i.UpdatedAtLT))
	}
	if i.UpdatedAtLTE != nil {
		predicates = append(predicates, contract.UpdatedAtLTE(*i.UpdatedAtLTE))
	}

	switch len(predicates) {
	case 0:
		return nil, ErrEmptyContractWhereInput
	case 1:
		return predicates[0], nil
	default:
		return contract.And(predicates...), nil
	}
}

// Code generated by mockery v2.32.4. DO NOT EDIT.

package repomocks

import (
	context "context"
	ent "golang-boilerplate/ent"

	mock "github.com/stretchr/testify/mock"

	model "golang-boilerplate/model"
)

// Repository is an autogenerated mock type for the Repository type
type Repository struct {
	mock.Mock
}

// CreateUser provides a mock function with given fields: ctx, input
func (_m *Repository) CreateUser(ctx context.Context, input ent.CreateUserInput) (*model.UserReturn, error) {
	ret := _m.Called(ctx, input)

	var r0 *model.UserReturn
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, ent.CreateUserInput) (*model.UserReturn, error)); ok {
		return rf(ctx, input)
	}
	if rf, ok := ret.Get(0).(func(context.Context, ent.CreateUserInput) *model.UserReturn); ok {
		r0 = rf(ctx, input)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.UserReturn)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, ent.CreateUserInput) error); ok {
		r1 = rf(ctx, input)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteUser provides a mock function with given fields: ctx, id
func (_m *Repository) DeleteUser(ctx context.Context, id int) (*model.UserReturn, error) {
	ret := _m.Called(ctx, id)

	var r0 *model.UserReturn
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int) (*model.UserReturn, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int) *model.UserReturn); ok {
		r0 = rf(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.UserReturn)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, int) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateUser provides a mock function with given fields: ctx, id, input
func (_m *Repository) UpdateUser(ctx context.Context, id int, input ent.UpdateUserInput) (*model.UserReturn, error) {
	ret := _m.Called(ctx, id, input)

	var r0 *model.UserReturn
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int, ent.UpdateUserInput) (*model.UserReturn, error)); ok {
		return rf(ctx, id, input)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int, ent.UpdateUserInput) *model.UserReturn); ok {
		r0 = rf(ctx, id, input)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.UserReturn)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, int, ent.UpdateUserInput) error); ok {
		r1 = rf(ctx, id, input)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewRepository creates a new instance of Repository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *Repository {
	mock := &Repository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
